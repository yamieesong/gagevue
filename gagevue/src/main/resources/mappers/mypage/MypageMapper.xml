<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="kr.happyjob.study.repository.mypage.MypageMapper">


	<!-- React(리액트) -->
	<!-- 가계부 지출/수입 총 통계 -->
	<select id = "getgagevueListChart" parameterType="java.util.Map" resultType = "kr.happyjob.study.vo.mypage.MypageModel">
		 /*getgagevueListChart 가계부 지출/수입 통계 page 조회 */
		 SELECT 
		     mn_dtm
		    , mn_use_dvs
		    , mn_amount
		    , mn_use_dvs_det
		    , mn_use_memo
		    , sum(mn_amount) as sum_amount
		    , (select detail_name from tb_detail_code where detail_code = mn_use_dvs_det) as detail_name
		    , ROUND(SUM(mn_amount) / 
		    (SELECT SUM(mn_amount) FROM tb_mn 
		    WHERE 1=1
		    AND mn_use_dvs = #{mn_use_dvs} 
		    AND mn_rgst_id = #{mn_rgst_id} 
		    AND DATE(mn_dtm) BETWEEN #{from_date} AND #{to_date} ) * 100, 2) AS percentage
		    , mn_rgst_id
		FROM tb_mn
		    WHERE 1=1 
		    <if test="mn_use_dvs != null">
		    AND mn_use_dvs = #{mn_use_dvs}
		    </if>
		    <if test="mn_rgst_id != null">
		    AND mn_rgst_id = #{mn_rgst_id}
		    </if>
		    <if test ="(from_date != null) and (to_date != null)">
		   	AND DATE(mn_dtm) BETWEEN #{from_date} AND #{to_date} 
		   	</if>
		    GROUP BY mn_use_dvs_det
		    ORDER BY sum(mn_amount) desc
	</select>
	
	<!-- 가계뷰 지출/수입 총 합계 -->
	<select id="getgagevueListChartTotal" resultType="int">
		/*getgagevueListChartTotal 가계뷰 지출/수입 총 합계 */
		SELECT 
    		SUM(mn_amount) as total_amount
		FROM 
    	tb_mn
		WHERE 1=1
	    <if test="mn_use_dvs != null">
		AND mn_use_dvs = #{mn_use_dvs}
	    </if>
	    <if test="mn_rgst_id != null">
	    AND mn_rgst_id = #{mn_rgst_id}
	    </if>
	    <if test ="(from_date != null) and (to_date != null)">
	   	AND DATE(mn_dtm) BETWEEN #{from_date} AND #{to_date} 
	   	</if>
	</select>	
	
	<!-- 가계뷰 지출/수입 결제 통계 -->
	<select id="getgagevueListPay" parameterType="java.util.Map" resultType = "kr.happyjob.study.vo.mypage.MypageModel">
		/*getgagevueListPay 가계뷰 지출/수입 결제 통계 */
		 SELECT 
		     mn_dtm
		    , mn_use_dvs
        	, mn_pay_dvs
		    , mn_amount
		    , mn_use_dvs_det
		    , mn_use_memo
		    , (select detail_name from tb_detail_code where detail_code = mn_use_dvs_det) as detail_name
        	, (select detail_name from tb_detail_code where 1=1 and group_code="PAY_DVS" and detail_code = mn_pay_dvs ) as pay_name
		    , mn_rgst_id
	        ,CASE 
		        WHEN DAYOFMONTH(mn_dtm) BETWEEN 1 AND 7 THEN '1주'
		        WHEN DAYOFMONTH(mn_dtm) BETWEEN 8 AND 14 THEN '2주'
		        WHEN DAYOFMONTH(mn_dtm) BETWEEN 15 AND 21 THEN '3주'
		        WHEN DAYOFMONTH(mn_dtm) BETWEEN 22 AND 28 THEN '4주'
		    ELSE '5주'  
	    	END AS week_number
    		,SUM(CASE WHEN mn_pay_dvs = 1 THEN mn_amount ELSE 0 END) AS sum_amount_pay_card
    		,SUM(CASE WHEN mn_pay_dvs = 2 THEN mn_amount ELSE 0 END) AS sum_amount_pay_money
		FROM tb_mn
		WHERE 1=1
	    <if test="mn_use_dvs != null">
		AND mn_use_dvs = #{mn_use_dvs}
	    </if>
	    <if test="mn_rgst_id != null">
	    AND mn_rgst_id = #{mn_rgst_id}
	    </if>
	    <if test ="(from_date != null) and (to_date != null)">
	   	AND DATE(mn_dtm) BETWEEN #{from_date} AND #{to_date} 
	   	</if>
	   	GROUP BY week_number, mn_pay_dvs
	</select>	
	
	
	<!--  // =================================================================================================================== //  -->
	
	<!-- React(리액트) -->
	<!-- 가계부 지출입 내역 -->
	<select id = "expenditureList" parameterType="java.util.Map" resultType = "kr.happyjob.study.vo.mypage.MypageModel">
		SELECT
			mn_pay_dvs
			, mn_use_dvs_det
			, sum(mn_amount) as sum_amount
			, (select detail_name from tb_detail_code where detail_code = mn_use_dvs_det) as detail_name
		FROM tb_mn
		<if test="mn_use_dvs != null">
			WHERE mn_use_dvs = #{mn_use_dvs}
		</if>
		AND mn_upd_id = #{loginId}
		<if test ="(from_date != null) and (!from_date.equals(''))">
		    AND DATE_FORMAT(mn_upd_dtm, '%Y-%m-%d')  <![CDATA[>=]]> STR_TO_DATE(#{from_date}, '%Y-%m-%d')
		</if>
		<if test ="(to_date != null) and (!to_date.equals(''))">
		    AND DATE_FORMAT(mn_upd_dtm, '%Y-%m-%d')  <![CDATA[<=]]> STR_TO_DATE(#{to_date}, '%Y-%m-%d')
		</if>
		<if test="typeChk == 'pay'">
			GROUP BY mn_pay_dvs
		</if>
		<if test="typeChk != 'pay'">
			GROUP BY mn_use_dvs_det
		</if>
		ORDER BY sum(mn_amount) desc
	</select>

	<select id="cardCashStatisticsTest1" resultType = "kr.happyjob.study.vo.mypage.MypageModel">
		select
			mn_upd_dtm,
			sum(mn_amount) as sum_amount
		from tb_mn
		where
			mn_upd_id = #{loginId}
			and mn_use_dvs = 1
		  	and mn_pay_dvs = 1
			AND DATE_FORMAT(mn_upd_dtm, '%Y-%m-%d')   <![CDATA[>=]]>  STR_TO_DATE(#{from_date}, '%Y-%m-%d')
			AND DATE_FORMAT(mn_upd_dtm, '%Y-%m-%d')   <![CDATA[<=]]>  STR_TO_DATE(#{to_date}, '%Y-%m-%d')
		group by mn_upd_dtm
	</select>

	<select id="cardCashStatisticsTest2" resultType = "kr.happyjob.study.vo.mypage.MypageModel">
		select
			mn_upd_dtm,
			sum(mn_amount) as sum_amount
		from tb_mn
		where
			mn_upd_id = #{loginId}
			and mn_use_dvs = 1
		  	and mn_pay_dvs = 2
			AND DATE_FORMAT(mn_upd_dtm, '%Y-%m-%d')   <![CDATA[>=]]>  STR_TO_DATE(#{from_date}, '%Y-%m-%d')
			AND DATE_FORMAT(mn_upd_dtm, '%Y-%m-%d')   <![CDATA[<=]]>  STR_TO_DATE(#{to_date}, '%Y-%m-%d')
		group by mn_upd_dtm
	</select>

	<select id="updateUser" parameterType="kr.happyjob.study.vo.login.UserVO">
		update
		    tb_userinfo
		set
            mbr_hp = #{hp}
            ,mbr_mail = #{email}
			<if test="password != null and password != ''">
            ,password = #{password}
			</if>
            ,mbr_yn = #{mbrYn}
		where
		    loginID = #{loginId}
	</select>
	
	<!-- 마이페이지 회원정보 -->
	<select id = "getMypageUserInfo" parameterType="java.util.Map" resultType = "kr.happyjob.study.vo.mypage.MypageUserInfoModel">
		SELECT
			a.mbr_no
			,	a.name
			,	a.mbr_hp
			,	a.mbr_mail
			,	a.loginID
			,	a.password
			,	a.mbr_yn
			,	(select goal_ntc from tb_goal where mbr_no = a.mbr_no and goal_yr = #{goal_yr} and goal_m = #{goal_m}) as goal
		FROM tb_userinfo a
		where loginID = #{loginId}
	</select>
	
	<!-- 마이페이지 목표치 수정 -->
	<select id="updateUserGoal" parameterType="kr.happyjob.study.vo.login.UserVO">
		update
		    tb_goal
		set
            goal_ntc = #{goal}
		where
		    mbr_no = #{mbr_no}
	    and
	    	goal_yr = #{goal_yr}
	    and
	    	goal_m = #{goal_m} 
	</select>

	<update id="updatePw" parameterType="java.util.Map">
		update
			tb_userinfo
		set
			password = #{password}
		where
			loginID = #{loginId}
	</update>
</mapper>